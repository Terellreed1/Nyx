from naoqi import ALProxy
import numpy as np

# Robot's IP address
IP = "172.20.95.101"
PORT = 9559

def calculate_brightness(image_data):
    image_array = np.frombuffer(image_data, dtype=np.uint8)
    image_array = image_array.reshape((240, 320, 3))
    average_brightness = np.mean(image_array)
    print("Debug: Calculated average image brightness: {:.2f}".format(average_brightness))
    return average_brightness

def adjust_and_announce_brightness(brightness, leds_proxy, tts_proxy):
    # Determine the brightness level of the LEDs based on ambient brightness
    if brightness >= 200:
        leds_brightness = 0.2
        announcement = "The ambient light is very bright, at {:.2f}. I'm setting my eye brightness to 20% for better photo capture.".format(brightness)
    elif brightness >= 100:
        leds_brightness = 0.5
        announcement = "The ambient light is moderately bright, at {:.2f}. Adjusting my eye brightness to 50%.".format(brightness)
    elif brightness > 10:
        leds_brightness = 0.8
        announcement = "The ambient light is dim, at {:.2f}. I'm increasing my eye brightness to 80%.".format(brightness)
    else:
        leds_brightness = 1.0
        announcement = "It's quite dark here, with a brightness of {:.2f}. Setting my eye brightness to maximum.".format(brightness)

    # Apply LED intensity setting
    leds_proxy.setIntensity("FaceLeds", leds_brightness)
    print("Debug: Set LED brightness to {:.0f}%".format(leds_brightness * 100))

    # Announce the action
    tts_proxy.say(announcement)
    print("Debug: " + announcement)

# Create proxies
video_device = ALProxy("ALVideoDevice", IP, PORT)
tts_proxy = ALProxy("ALTextToSpeech", IP, PORT)
leds_proxy = ALProxy("ALLeds", IP, PORT)

# Subscribe to the front camera
camera_subscription = video_device.subscribeCamera("camera_test", 0, 1, 11, 10)

try:
    # Get an image
    image_data = video_device.getImageRemote(camera_subscription)

    if image_data:
        # Calculate brightness
        brightness = calculate_brightness(image_data[6])
        print("Image captured: Width = {}, Height = {}".format(image_data[0], image_data[1]))
        print("Average brightness of the image: {:.2f}".format(brightness))
        
        # Adjust LED brightness and announce changes
        adjust_and_announce_brightness(brightness, leds_proxy, tts_proxy)
    else:
        print("Failed to capture image")
        tts_proxy.say("Failed to capture image.")

finally:
    # Unsubscribe from the camera feed
    video_device.unsubscribe(camera_subscription)
    print("Camera subscription ended.")

