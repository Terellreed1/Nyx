from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.max_attempts = 3
        self.current_attempt = 0

    def onLoad(self):
        try:
            self.faceDetectionModule = ALProxy("ALFaceDetection")
            self.camera = ALProxy("ALVideoDevice")
            self.ttsProxy = ALProxy("ALTextToSpeech")
            self.motionProxy = ALProxy("ALMotion")
        except Exception as e:
            self.faceDetectionModule = None
            self.camera = None
            self.ttsProxy = None
            self.motionProxy = None
            self.logger.error(e)

        if not self.camera:
            self.logger.error("Camera service not available.")
        if not self.faceDetectionModule:
            self.logger.error("Face detection service not available.")
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def adjust_camera_settings(self):
        if not self.camera:
            self.logger.error("Camera service not available.")
            return

        brightness_value = 76
        contrast_value = 47
        exposure_value = 144

        self.camera.setParameter(0, 0, brightness_value)
        self.camera.setParameter(0, 1, contrast_value)
        self.camera.setParameter(0, 17, exposure_value)

    def say_text(self, text):
        if self.ttsProxy:
            self.ttsProxy.setParameter("doubleVoice", 1.0)
            self.ttsProxy.setParameter("doubleVoiceLevel", 0.5)
            self.ttsProxy.setParameter("doubleVoiceTimeShift", 0.1)
            self.ttsProxy.setParameter("pitchShift", 1)
            self.ttsProxy.setParameter("speed", 85)
            self.ttsProxy.say(text)
        else:
            self.logger.info(text)  # Log if TTS proxy is not available

    def reset_head(self):
        if not self.motionProxy:
            self.logger.error("Motion proxy not available.")
            return

        # Reset head position
        self.motionProxy.setAngles("HeadPitch", 0.0, 0.1)
        self.motionProxy.setAngles("HeadYaw", 0.0, 0.1)

    def clear_face_database(self):
        if self.faceDetectionModule:
            self.faceDetectionModule.clearDatabase()
            self.say_text("All faces have been removed from memory.")
        else:
            self.logger.error("Face detection module not available.")

    def onInput_onLearn(self, p):
        if self.bIsRunning:
            return

        self.bIsRunning = True
        self.current_attempt = 0

        # Clear existing faces from memory
        self.clear_face_database()

        while self.current_attempt < self.max_attempts:
            self.logger.info("Attempting to learn face, attempt #%s", self.current_attempt + 1)
            self.say_text("Attempting to learn face, attempt " + str(self.current_attempt + 1))

            self.adjust_camera_settings()
            self.reset_head()

            if self.faceDetectionModule:
                # Check if face detection is enabled
                if not self.faceDetectionModule.isRecognitionEnabled():
                    self.faceDetectionModule.enableRecognition(True)
                    self.say_text("Face recognition enabled.")

                # Set the recognition confidence threshold
                confidence_threshold = 0.7
                self.faceDetectionModule.setRecognitionConfidenceThreshold(confidence_threshold)
                self.say_text("Recognition confidence threshold set to " + str(confidence_threshold))

                # Learn the face
                if self.faceDetectionModule.learnFace(p):
                    self.onSuccess()
                    self.say_text("Face learned successfully.")
                    
                    # Get the number of learned faces
                    num_learned_faces = len(self.faceDetectionModule.getLearnedFacesList())
                    self.say_text("Number of learned faces: " + str(num_learned_faces))
                    
                    self.bIsRunning = False
                    return
                else:
                    self.say_text("No face detected. Please make sure your face is clearly visible.")

            self.current_attempt += 1

        self.onFailure()
        self.say_text("Face not learned.")
        self.bIsRunning = False

    def onSuccess(self):
        # Perform actions when face learning is successful
        pass

    def onFailure(self):
        # Perform actions when face learning fails
        pass
